(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_4 Nat_0) (x_3 Nat_0))
	(=> (= x_4 (S_0 x_3))
	    (unS_1 x_3 x_4))))
(assert (isZ_0 Z_0))
(assert (forall ((x_5 Nat_0))
	(isS_0 (S_0 x_5))))
(assert (forall ((x_6 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_6))))
(assert (forall ((x_7 Nat_0))
	(diseqNat_0 (S_0 x_7) Z_0)))
(assert (forall ((x_8 Nat_0) (x_9 Nat_0))
	(=> (diseqNat_0 x_8 x_9)
	    (diseqNat_0 (S_0 x_8) (S_0 x_9)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_0 Nat_0))
	(add_0 y_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_1 y_0)
	    (add_0 (S_0 r_0) (S_0 x_1) y_0))))
(assert (forall ((y_0 Nat_0))
	(minus_0 Z_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_1 y_0)
	    (minus_0 (S_0 r_0) (S_0 x_1) y_0))))
(assert (forall ((y_0 Nat_0))
	(le_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (le_0 x_1 y_0)
	    (le_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(ge_0 y_0 Z_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (ge_0 x_1 y_0)
	    (ge_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(lt_0 Z_0 (S_0 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (lt_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(gt_0 (S_0 y_0) Z_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (gt_0 x_1 y_0)
	    (gt_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(mult_0 Z_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (mult_0 r_0 x_1 y_0)
			(add_0 z_0 r_0 y_0))
		(mult_0 z_0 (S_0 x_1) y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (div_0 Z_0 x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_1 y_0)
			(minus_0 z_0 x_1 y_0)
			(div_0 r_0 z_0 y_0))
		(div_0 (S_0 r_0) x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (mod_0 x_1 x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_1 y_0)
			(minus_0 z_0 x_1 y_0)
			(mod_0 r_0 z_0 y_0))
		(mod_0 r_0 x_1 y_0))))
(declare-datatypes ((Lst_0 0)) (((cons_0 (head_0 Nat_0) (tail_0 Lst_0)) (nil_0 ))))
(declare-fun diseqLst_0 (Lst_0 Lst_0) Bool)
(declare-fun head_1 (Nat_0 Lst_0) Bool)
(declare-fun tail_1 (Lst_0 Lst_0) Bool)
(declare-fun iscons_0 (Lst_0) Bool)
(declare-fun isnil_0 (Lst_0) Bool)
(assert (forall ((x_12 Lst_0) (x_10 Nat_0) (x_11 Lst_0))
	(=> (= x_12 (cons_0 x_10 x_11))
	    (head_1 x_10 x_12))))
(assert (forall ((x_12 Lst_0) (x_10 Nat_0) (x_11 Lst_0))
	(=> (= x_12 (cons_0 x_10 x_11))
	    (tail_1 x_11 x_12))))
(assert (forall ((x_14 Nat_0) (x_15 Lst_0))
	(iscons_0 (cons_0 x_14 x_15))))
(assert (isnil_0 nil_0))
(assert (forall ((x_16 Nat_0) (x_17 Lst_0))
	(diseqLst_0 (cons_0 x_16 x_17) nil_0)))
(assert (forall ((x_18 Nat_0) (x_19 Lst_0))
	(diseqLst_0 nil_0 (cons_0 x_18 x_19))))
(assert (forall ((x_20 Nat_0) (x_21 Lst_0) (x_22 Nat_0) (x_23 Lst_0))
	(=> (diseqNat_0 x_20 x_22)
	    (diseqLst_0 (cons_0 x_20 x_21) (cons_0 x_22 x_23)))))
(assert (forall ((x_20 Nat_0) (x_21 Lst_0) (x_22 Nat_0) (x_23 Lst_0))
	(=> (diseqLst_0 x_21 x_23)
	    (diseqLst_0 (cons_0 x_20 x_21) (cons_0 x_22 x_23)))))
(declare-fun append_0 (Lst_0 Lst_0 Lst_0) Bool)
(assert (forall ((xs_0 Lst_0))
	(append_0 nil_0 xs_0 xs_0)))
(assert (forall ((x_0 Nat_0) (xs_1 Lst_0) (ys_0 Lst_0) (zs_0 Lst_0) (rs_0 Lst_0) (ts_0 Lst_0))
	(=>	(and (= xs_1 (cons_0 x_0 ys_0))
			(append_0 ys_0 zs_0 rs_0)
			(= ts_0 (cons_0 x_0 rs_0)))
		(append_0 xs_1 zs_0 ts_0))))
(assert (forall ((xs_2 Lst_0) (ys_1 Lst_0))
	(=>	(and (append_0 xs_2 nil_0 ys_1)
			(diseqLst_0 xs_2 ys_1))
		false)))
(check-sat)
