(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_5 Nat_0) (x_4 Nat_0))
	(=> (= x_5 (S_0 x_4))
	    (unS_1 x_4 x_5))))
(assert (isZ_0 Z_0))
(assert (forall ((x_6 Nat_0))
	(isS_0 (S_0 x_6))))
(assert (forall ((x_7 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_7))))
(assert (forall ((x_8 Nat_0))
	(diseqNat_0 (S_0 x_8) Z_0)))
(assert (forall ((x_9 Nat_0) (x_10 Nat_0))
	(=> (diseqNat_0 x_9 x_10)
	    (diseqNat_0 (S_0 x_9) (S_0 x_10)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_0 Nat_0))
	(add_0 y_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_1 Nat_0))
	(=> (add_0 r_1 x_1 y_0)
	    (add_0 (S_0 r_1) (S_0 x_1) y_0))))
(assert (forall ((y_0 Nat_0))
	(minus_0 Z_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_1 Nat_0))
	(=> (minus_0 r_1 x_1 y_0)
	    (minus_0 (S_0 r_1) (S_0 x_1) y_0))))
(assert (forall ((y_0 Nat_0))
	(le_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (le_0 x_1 y_0)
	    (le_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(ge_0 y_0 Z_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (ge_0 x_1 y_0)
	    (ge_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(lt_0 Z_0 (S_0 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (lt_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(gt_0 (S_0 y_0) Z_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (gt_0 x_1 y_0)
	    (gt_0 (S_0 x_1) (S_0 y_0)))))
(assert (forall ((y_0 Nat_0))
	(mult_0 Z_0 Z_0 y_0)))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_1 Nat_0) (z_0 Nat_0))
	(=>	(and (mult_0 r_1 x_1 y_0)
			(add_0 z_0 r_1 y_0))
		(mult_0 z_0 (S_0 x_1) y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (div_0 Z_0 x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_1 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_1 y_0)
			(minus_0 z_0 x_1 y_0)
			(div_0 r_1 z_0 y_0))
		(div_0 (S_0 r_1) x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0))
	(=> (lt_0 x_1 y_0)
	    (mod_0 x_1 x_1 y_0))))
(assert (forall ((x_1 Nat_0) (y_0 Nat_0) (r_1 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_1 y_0)
			(minus_0 z_0 x_1 y_0)
			(mod_0 r_1 z_0 y_0))
		(mod_0 r_1 x_1 y_0))))
(declare-datatypes ((Tree_0 0)) (((node_0 (data_0 Nat_0) (left_0 Tree_0) (right_0 Tree_0)) (nil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun data_1 (Nat_0 Tree_0) Bool)
(declare-fun left_1 (Tree_0 Tree_0) Bool)
(declare-fun right_1 (Tree_0 Tree_0) Bool)
(declare-fun isnode_0 (Tree_0) Bool)
(declare-fun isnil_0 (Tree_0) Bool)
(assert (forall ((x_14 Tree_0) (x_11 Nat_0) (x_12 Tree_0) (x_13 Tree_0))
	(=> (= x_14 (node_0 x_11 x_12 x_13))
	    (data_1 x_11 x_14))))
(assert (forall ((x_14 Tree_0) (x_11 Nat_0) (x_12 Tree_0) (x_13 Tree_0))
	(=> (= x_14 (node_0 x_11 x_12 x_13))
	    (left_1 x_12 x_14))))
(assert (forall ((x_14 Tree_0) (x_11 Nat_0) (x_12 Tree_0) (x_13 Tree_0))
	(=> (= x_14 (node_0 x_11 x_12 x_13))
	    (right_1 x_13 x_14))))
(assert (forall ((x_16 Nat_0) (x_17 Tree_0) (x_18 Tree_0))
	(isnode_0 (node_0 x_16 x_17 x_18))))
(assert (isnil_0 nil_0))
(assert (forall ((x_19 Nat_0) (x_20 Tree_0) (x_21 Tree_0))
	(diseqTree_0 (node_0 x_19 x_20 x_21) nil_0)))
(assert (forall ((x_22 Nat_0) (x_23 Tree_0) (x_24 Tree_0))
	(diseqTree_0 nil_0 (node_0 x_22 x_23 x_24))))
(assert (forall ((x_25 Nat_0) (x_26 Tree_0) (x_27 Tree_0) (x_28 Nat_0) (x_29 Tree_0) (x_30 Tree_0))
	(=> (diseqNat_0 x_25 x_28)
	    (diseqTree_0 (node_0 x_25 x_26 x_27) (node_0 x_28 x_29 x_30)))))
(assert (forall ((x_25 Nat_0) (x_26 Tree_0) (x_27 Tree_0) (x_28 Nat_0) (x_29 Tree_0) (x_30 Tree_0))
	(=> (diseqTree_0 x_26 x_29)
	    (diseqTree_0 (node_0 x_25 x_26 x_27) (node_0 x_28 x_29 x_30)))))
(assert (forall ((x_25 Nat_0) (x_26 Tree_0) (x_27 Tree_0) (x_28 Nat_0) (x_29 Tree_0) (x_30 Tree_0))
	(=> (diseqTree_0 x_27 x_30)
	    (diseqTree_0 (node_0 x_25 x_26 x_27) (node_0 x_28 x_29 x_30)))))
(declare-fun size_0 (Tree_0 Nat_0) Bool)
(assert (size_0 nil_0 Z_0))
(assert (forall ((x_0 Nat_0) (r_0 Tree_0) (l_0 Tree_0) (m_0 Tree_0) (sl_0 Nat_0) (sr_0 Nat_0) (x_2 Nat_0))
	(=>	(and (add_0 x_2 sl_0 sr_0)
			(= m_0 (node_0 x_0 l_0 r_0))
			(size_0 l_0 sl_0)
			(size_0 r_0 sr_0))
		(size_0 m_0 x_2))))
(assert (forall ((s_0 Nat_0) (m_1 Tree_0))
	(=>	(and (size_0 m_1 s_0)
			(lt_0 s_0 Z_0))
		false)))
(check-sat)
